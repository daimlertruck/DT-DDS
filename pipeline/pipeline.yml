name: $(Build.DefinitionName)-$(Build.BuildId)

resources:
  repositories:
    - repository: templates
      type: GitHubEnterprise
      name: tblx/azure-pipeline-templates
      ref: v52
      endpoint: GitHubDTUI

trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    include:
      - pipeline/*
      - packages/dt-ui-react/*
      - apps/docs/*
    exclude:
      - \*

pr:
  branches:
    include:
      - "*"
  paths:
    include:
      - packages/dt-ui-react/*
      - apps/docs/*

variables:
  - name: PR_NUMBER
    ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
      value: $[format('{0}', variables['System.PullRequest.PullRequestNumber'])]
    ${{ else }}:
      value: ""
  - name: PR_NAME
    ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
      value: $[format('PR-{0}', variables['System.PullRequest.PullRequestNumber'])]
    ${{ else }}:
      value: ""
  - name: REPO_OWNER
    value: DT-Design-System
  - name: REPO_NAME
    value: dt-ui
  - name: GH_HOST
    value: git.t3.daimlertruck.com
  - name: GIT_FAKE_EMAIL
    value: dt-ui@daimlertruck.com
  - name: GIT_FAKE_USER
    value: dt-ui

stages:
  - stage: Prepare
    displayName: Prepare environment variables
    pool: DEVAgentPool
    jobs:
      - job: Environment
        displayName: Prepare Environment variables
        workspace:
          clean: all
        steps:
          - checkout: self
            clean: true
          - template: Utils/job-prepare-node.yml@templates
            parameters:
              commit-id: $(Build.SourceVersion)
          - script: |
              echo "##vso[build.updatebuildnumber]v$(setvars.VERSION)-b$(Build.BuildId)"
            displayName: "Overriding BuildNumber"
          - task: Bash@3
            displayName: Check fixups commits
            inputs:
              targetType: inline
              script: |
                fixups=$(git log --oneline origin/main..HEAD -- | grep -e "fixup! ")
                if [ -z "$fixups" ]; then
                  exit 0
                fi
                RED='\033[0;31m'
                NC='\033[0m' # No Color
                echo -e "${RED}$fixups${NC}"
                exit 1

  - stage: ContinuousIntegration
    displayName: Continuous Integration
    dependsOn: Prepare
    pool: DEVAgentPool
    jobs:
      - job: Lint
        displayName: Run Lint
        steps:
          - template: templates/yarn-node-install.yml
          - script: |
              yarn install
              yarn lint
            displayName: "Run lint"

      - job: UnitTests
        displayName: Run Unit Tests
        dependsOn: Lint
        steps:
          - template: templates/yarn-node-install.yml
          - script: |
              yarn install
              yarn test
            displayName: Run Unit Tests
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: JUnit
              testResultsFiles: "**/jest-coverage/report.xml"
              mergeTestResults: true
              failTaskOnFailedTests: true

      - job: Build
        displayName: Run Build
        steps:
          - template: templates/yarn-node-install.yml
          - template: templates/npmrc-creation.yml
          - script: |
              yarn install
              yarn build
            displayName: "Run build"
            workingDirectory: packages/dt-ui-react

          - publish: $(Build.SourcesDirectory)/packages/dt-ui-react/dist
            artifact: build-react

  - stage: VersionAndTag
    displayName: Version and Tag DT-UI
    pool: DEVAgentPool
    dependsOn: ContinuousIntegration
    condition: and(contains(variables['build.sourceBranch'], 'refs/heads/main'), succeeded())
    jobs:
      - job: VersionAndTag
        displayName: Run changesets versioning and tagging
        steps:
          - template: templates/yarn-node-install.yml
          - script: |
              git config --global user.email $(GIT_FAKE_EMAIL)
              git config --global user.name ${GIT_FAKE_USER}
            displayName: "Setup fake credentials"
          - checkout: self
            persistCredentials: true

          - script: |
              yarn install
              yarn build
            displayName: "Run build for changeset plugin"
            workingDirectory: packages/changeset-conventional-commits

          - script: |
              git checkout $(Build.SourceBranchName)
              yarn changesets:ci
              git push origin $(Build.SourceBranchName)
              git push origin --tags
            displayName: "Bump affected packages version and tag"

  - stage: Publish
    displayName: Publish DT-UI
    pool: DEVAgentPool
    condition: and(contains(variables['build.sourceBranch'], 'refs/heads/main'), succeeded())
    dependsOn: VersionAndTag
    variables:
      - group: common-var-group
    jobs:
      - job: Publish
        displayName: Run Publish to Artifactory
        steps:
          - template: templates/yarn-node-install.yml
          - template: templates/npmrc-creation.yml
          - script: |
              published_versions=$(yarn info @dt-ui/react versions)
              current_version=$(node -pe "require('./packages/dt-ui-react/package.json').version")
              if [[ $published_versions == *"$current_version"* ]]; then
                echo "Version is already published: $current_version"
                exit 1
              else
                echo "Publishing the new version: $current_version"
              fi
            displayName: "Compare package versions"
          - template: templates/yarn-node-install.yml

          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: build-react
              targetPath: $(Build.SourcesDirectory)/packages/dt-ui-react/dist
            displayName: Download build

          - task: ArtifactoryNpm@2
            displayName: "Run Publish"
            inputs:
              command: "pack and publish"
              artifactoryService: "Artifactory DT"
              targetRepo: "DTUI_NPM_LOCAL"
              workingFolder: "packages/dt-ui-react"

  - stage: BuildAndDeployStorybook
    displayName: Build and Deploy Storybook
    dependsOn: ContinuousIntegration
    pool: DEVAgentPool
    jobs:
      - job: BuildStorybook
        displayName: Build Storybook
        workspace:
          clean: all
        steps:
          - template: templates/yarn-node-install.yml
          - task: Yarn@3
            inputs:
              arguments: "install"
              cwd: "apps/docs"
            displayName: Install Packages

          - task: Yarn@3
            inputs:
              projectDirectory: "$(Build.SourcesDirectory)/apps/docs"
              arguments: "build"
            displayName: Build Storybook

          - publish: $(Build.SourcesDirectory)/apps/docs/storybook-static
            artifact: storybook-static

      - job: DeployStorybook
        displayName: Deploy Storybook
        dependsOn: BuildStorybook
        workspace:
          clean: all
        steps:
          - script: |
              git config --global user.email $(GIT_FAKE_EMAIL)
              git config --global user.name ${GIT_FAKE_USER}
            displayName: "Setup fake credentials"

          - checkout: self
            persistCredentials: true
            clean: true

          - script: |
              git pull
              git checkout -b gh-pages-$(Build.BuildId) origin/gh-pages
            displayName: "Create new branch"

          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: storybook-static
              targetPath: $(Build.SourcesDirectory)
            displayName: Download storybook files
            condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')

          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: storybook-static
              targetPath: $(Build.SourcesDirectory)/$(PR_NAME)
            displayName: Download storybook files
            condition: eq(variables['Build.Reason'], 'PullRequest')

          - script: |
              git add . --all

              echo -e "\n\033[34m==>\033[0;1m" "Checking for Changes\033[0m"
              if [[ -z $(git status -s) ]]; then
                echo -e "\033[33;1m==>\033[0m" "No Changes found."
                exit 0
              else
                echo -e "\n\033[34m==>\033[0;1m" "Changes found.\033[0m"
                git commit -m "chore: update and publish Storybook"
                git checkout gh-pages
                git merge gh-pages-$(Build.BuildId)
                git push origin gh-pages
              fi
            displayName: "Deploy storybook"

  - stage: ChangePRDescription
    displayName: Change PR Description
    pool: DEVAgentPool
    variables:
      - group: common-var-group
    dependsOn: BuildAndDeployStorybook
    condition: eq(variables['Build.Reason'], 'PullRequest')
    jobs:
      - job: ChangePRDescription
        displayName: Change PR Description
        workspace:
          clean: all
        steps:
          - script: |
              PR_VIEW_OUTPUT=$(curl --request GET --url "https://$(GH_HOST)/api/v3/repos/$(REPO_OWNER)/$(REPO_NAME)/pulls/$(PR_NUMBER)" --header "Authorization: Bearer $GH_ENTERPRISE_TOKEN" | jq -r '.body')

              if echo "$PR_VIEW_OUTPUT" | grep -q "/pages/.*\/$(PR_NAME)"; then
                echo "Preview Link is already in the description."
                exit 0
              else
                NEW_BODY=$(jq -n --arg string "$PR_VIEW_OUTPUT" '($string + "\n\nhttps://$(GH_HOST)/pages/$(REPO_OWNER)/$(REPO_NAME)/$(PR_NAME)")')
                curl --request PATCH \
                  --url "https://$(GH_HOST)/api/v3/repos/$(REPO_OWNER)/$(REPO_NAME)/pulls/$(PR_NUMBER)" \
                  --header "Authorization: Bearer $GH_ENTERPRISE_TOKEN" \
                  --data-raw '{ "body":'"$NEW_BODY"' }'
              fi
            displayName: Add Live Preview url to PR description
            env:
              GH_ENTERPRISE_TOKEN: $(gh-token)

  - stage: DeletePreviews
    displayName: Delete Preview Environments
    pool: DEVAgentPool
    variables:
      - group: common-var-group
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    dependsOn: []
    jobs:
      - job: DeletePreview
        displayName: Delete Preview Environment
        workspace:
          clean: all
        steps:
          - script: |
              git config --global user.email $(GIT_FAKE_EMAIL)
              git config --global user.name ${GIT_FAKE_USER}
            displayName: "Setup fake credentials"

          - checkout: self
            persistCredentials: true
            clean: true

          - script: |
              git pull
              COMMIT_HASH=$(git rev-parse HEAD)
              FOUND_PR_NUMBER=$(curl --request GET --url "https://$(GH_HOST)/api/v3/repos/$(REPO_OWNER)/$(REPO_NAME)/commits/$COMMIT_HASH/pulls?state=closed" --header "Authorization: Bearer $GH_ENTERPRISE_TOKEN" | jq -r ".[].number")
              echo "Will delete preview environment for: PR-$FOUND_PR_NUMBER"

              git checkout -b gh-pages-$(Build.BuildId) origin/gh-pages
              rm -rf PR-$FOUND_PR_NUMBER
              git add . --all

              git commit -m "chore: delete PR preview"
              git checkout gh-pages
              git merge gh-pages-$(Build.BuildId)
              git push origin gh-pages
            displayName: "Delete preview folder on Github Pages"
            env:
              GH_ENTERPRISE_TOKEN: $(gh-token)
